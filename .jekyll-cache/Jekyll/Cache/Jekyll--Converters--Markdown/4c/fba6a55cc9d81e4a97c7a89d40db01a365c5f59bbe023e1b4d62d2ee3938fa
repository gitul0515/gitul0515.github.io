I"UG<p><img src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/greenbutler.png?raw=true" alt="초록집사 표지" /></p>

<h3 id="이슈">이슈</h3>

<p>아래는 내가 만들고 있는 피드 목록 페이지다.</p>

<p><img style="margin-left: 0; height: 500px" src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/gb2_3.png?raw=true" alt="TIL 이미지" /></p>

<p>첫 마운트 시에 5개의 게시물을 불러온 뒤,<br />
사용자가 스크롤을 내려 마지막 게시물에 도달하면<br />
새롭게 5개의 게시물을 불러오는 방식으로 무한 스크롤을 구현하고 있었다.</p>

<p>그러던 중 난감한 버그를 만났다.</p>

<ol>
  <li>마지막 포스트에 도달하면 서버 요청이 한 번이 아니라 여러 번 발생한다.</li>
  <li>스크롤을 다시 올리는 경우에도 서버 요청이 발생한다.</li>
</ol>

<p>아래와 같이 의도치 않은 서버 요청이 다수 발생했음을 알 수 있다.</p>

<p><img style="margin-left: 0" src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/gb2_4.png?raw=true" alt="TIL 이미지" /></p>

<p>대체 왜 그럴까? 아래는 내가 작성한 코드이다.<br />
IntersectionObserver를 사용하여 구현하였다.<br />
onIntersect 함수와 두 번째 useEffect에 주목해주기 바란다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">MainPage</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">posts</span><span class="p">,</span> <span class="nx">setPosts</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">([]);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">isLoading</span><span class="p">,</span> <span class="nx">setIsLoading</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">offset</span><span class="p">,</span> <span class="nx">setOffset</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="kd">const</span> <span class="p">[</span><span class="nx">max</span><span class="p">,</span> <span class="nx">setMax</span><span class="p">]</span> <span class="o">=</span> <span class="nx">useState</span><span class="p">(</span><span class="mi">0</span><span class="p">);</span>
  <span class="kd">const</span> <span class="nx">targetRef</span> <span class="o">=</span> <span class="nx">useRef</span><span class="p">(</span><span class="kc">null</span><span class="p">);</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="p">(</span><span class="k">async</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="kd">const</span> <span class="nx">nextPosts</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getPostsPart</span><span class="p">({</span>
        <span class="nx">offset</span><span class="p">,</span>
        <span class="na">limit</span><span class="p">:</span> <span class="nx">LIMIT</span><span class="p">,</span>
      <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
      <span class="nx">setPosts</span><span class="p">(</span><span class="nx">nextPosts</span><span class="p">);</span>
      <span class="nx">setOffset</span><span class="p">(</span><span class="nx">offset</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
      <span class="nx">setMax</span><span class="p">(</span><span class="nx">nextPosts</span><span class="p">[</span><span class="mi">0</span><span class="p">].</span><span class="nx">channel</span><span class="p">.</span><span class="nx">posts</span><span class="p">.</span><span class="nx">length</span><span class="p">);</span>
    <span class="p">})();</span>
  <span class="p">},</span> <span class="p">[]);</span>

  <span class="kd">const</span> <span class="nx">onIntersect</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span>
    <span class="k">async</span> <span class="p">([</span><span class="nx">entry</span><span class="p">],</span> <span class="nx">observer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">isIntersecting</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isLoading</span> <span class="o">&amp;&amp;</span> <span class="nx">offset</span> <span class="o">&lt;</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">setIsLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
        <span class="nx">setOffset</span><span class="p">(</span><span class="nx">offset</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">nextPosts</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getPostsPart</span><span class="p">({</span>
          <span class="nx">offset</span><span class="p">,</span>
          <span class="na">limit</span><span class="p">:</span> <span class="nx">LIMIT</span><span class="p">,</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
        <span class="nx">setPosts</span><span class="p">([...</span><span class="nx">posts</span><span class="p">,</span> <span class="p">...</span><span class="nx">nextPosts</span><span class="p">]);</span>
        <span class="nx">setIsLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">[</span><span class="nx">isLoading</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">max</span><span class="p">,</span> <span class="nx">posts</span><span class="p">],</span>
  <span class="p">);</span>

  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">observer</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">targetRef</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="nx">onIntersect</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">threshold</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">,</span>
      <span class="p">});</span>
      <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">targetRef</span><span class="p">.</span><span class="nx">current</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">observer</span> <span class="o">&amp;&amp;</span> <span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">targetRef</span><span class="p">,</span> <span class="nx">onIntersect</span><span class="p">]);</span>

  <span class="k">return</span> <span class="p">(</span>
    <span class="o">&lt;</span><span class="nx">PageWrapper</span> <span class="nx">header</span> <span class="nx">nav</span> <span class="nx">info</span><span class="o">&gt;</span>
      <span class="o">&lt;</span><span class="nx">PostList</span><span class="o">&gt;</span>
        <span class="p">{</span><span class="nx">posts</span><span class="p">?.</span><span class="nx">map</span><span class="p">((</span><span class="nx">post</span><span class="p">,</span> <span class="nx">i</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="nx">posts</span><span class="p">.</span><span class="nx">length</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">===</span> <span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span>
              <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">i</span><span class="p">}</span> <span class="nx">ref</span><span class="o">=</span><span class="p">{</span><span class="nx">targetRef</span><span class="p">}</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">PostItem</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">i</span><span class="p">}</span> <span class="nx">post</span><span class="o">=</span><span class="p">{</span><span class="nx">post</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>            <span class="p">);</span>
          <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="p">(</span>
              <span class="o">&lt;</span><span class="nx">li</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">i</span><span class="p">}</span><span class="o">&gt;</span>
                <span class="o">&lt;</span><span class="nx">PostItem</span> <span class="nx">key</span><span class="o">=</span><span class="p">{</span><span class="nx">i</span><span class="p">}</span> <span class="nx">post</span><span class="o">=</span><span class="p">{</span><span class="nx">post</span><span class="p">}</span> <span class="sr">/</span><span class="err">&gt;
</span>              <span class="o">&lt;</span><span class="sr">/li</span><span class="err">&gt;
</span>            <span class="p">);</span>
          <span class="p">}</span>
        <span class="p">})}</span>
      <span class="o">&lt;</span><span class="sr">/PostList</span><span class="err">&gt;
</span>    <span class="o">&lt;</span><span class="sr">/PageWrapper</span><span class="err">&gt;
</span>  <span class="p">);</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">PostList</span> <span class="o">=</span> <span class="nx">styled</span><span class="p">.</span><span class="nx">ul</span><span class="s2">``</span><span class="p">;</span>

<span class="k">export</span> <span class="k">default</span> <span class="nx">MainPage</span><span class="p">;</span>
</code></pre></div></div>

<h3 id="문제-해결">문제 해결</h3>
<p>원인: <mark>관찰을 끝낸 Observer가 제거되지 않았기 때문이다.</mark></p>

<p>IntersectionObserver를 생성하는 useEffect 훅을 보자.<br />
targetRef 또는 onIntersect의 값이 변경되면<br />
옵저버를 새롭게 생성하고 있다.</p>

<p>targetRef는 마지막 게시물 요소이고, onIntersect는 콜백함수다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="nx">useEffect</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">observer</span><span class="p">;</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">targetRef</span><span class="p">.</span><span class="nx">current</span><span class="p">)</span> <span class="p">{</span>
      <span class="nx">observer</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">IntersectionObserver</span><span class="p">(</span><span class="nx">onIntersect</span><span class="p">,</span> <span class="p">{</span>
        <span class="na">threshold</span><span class="p">:</span> <span class="mf">0.4</span><span class="p">,</span>
      <span class="p">});</span>
      <span class="nx">observer</span><span class="p">.</span><span class="nx">observe</span><span class="p">(</span><span class="nx">targetRef</span><span class="p">.</span><span class="nx">current</span><span class="p">);</span>
    <span class="p">}</span>
    <span class="k">return</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="nx">observer</span> <span class="o">&amp;&amp;</span> <span class="nx">observer</span><span class="p">.</span><span class="nx">disconnect</span><span class="p">();</span>
  <span class="p">},</span> <span class="p">[</span><span class="nx">targetRef</span><span class="p">,</span> <span class="nx">onIntersect</span><span class="p">]);</span>
</code></pre></div></div>

<p>여기서 targetRef가 중요하다.<br />
서버 요청을 통해 리렌더링이 발생하면 targetRef가 변경된다.<br />
그리고 IntersectionObserver가 다시 생성된다.</p>

<p><mark>그럼 예전의 IntersectionObserver는 어떻게 될까?</mark><br />
<mark>당연히 사라지지 않고 그대로 남아있게 된다!</mark></p>

<p><mark>따라서 이미 관찰을 끝낸 IntersectionObserver를 제거하는 작업이 필요하다.</mark><br />
unobserve() 또는 disconnect()를 통해서 가능하다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="kd">const</span> <span class="nx">onIntersect</span> <span class="o">=</span> <span class="nx">useCallback</span><span class="p">(</span>
    <span class="k">async</span> <span class="p">([</span><span class="nx">entry</span><span class="p">],</span> <span class="nx">observer</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">isIntersecting</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">isLoading</span> <span class="o">&amp;&amp;</span> <span class="nx">offset</span> <span class="o">&lt;</span> <span class="nx">max</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">observer</span><span class="p">.</span><span class="nx">unobserve</span><span class="p">(</span><span class="nx">entry</span><span class="p">.</span><span class="nx">target</span><span class="p">);</span> <span class="c1">// 추가한 코드</span>
        <span class="nx">setIsLoading</span><span class="p">(</span><span class="kc">true</span><span class="p">);</span>
        <span class="nx">setOffset</span><span class="p">(</span><span class="nx">offset</span> <span class="o">+</span> <span class="mi">5</span><span class="p">);</span>
        <span class="kd">const</span> <span class="nx">nextPosts</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">getPostsPart</span><span class="p">({</span>
          <span class="nx">offset</span><span class="p">,</span>
          <span class="na">limit</span><span class="p">:</span> <span class="nx">LIMIT</span><span class="p">,</span>
        <span class="p">}).</span><span class="nx">then</span><span class="p">((</span><span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">res</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
        <span class="nx">setPosts</span><span class="p">([...</span><span class="nx">posts</span><span class="p">,</span> <span class="p">...</span><span class="nx">nextPosts</span><span class="p">]);</span>
        <span class="nx">setIsLoading</span><span class="p">(</span><span class="kc">false</span><span class="p">);</span>
      <span class="p">}</span>
    <span class="p">},</span>
    <span class="p">[</span><span class="nx">isLoading</span><span class="p">,</span> <span class="nx">offset</span><span class="p">,</span> <span class="nx">max</span><span class="p">,</span> <span class="nx">posts</span><span class="p">],</span>
  <span class="p">);</span>
</code></pre></div></div>

<p>관찰을 완료했다면, 해당 observe는 이제 필요없으므로<br />
unobserve()를 통해 해당 요소에 대한 관찰을 중단시켰다.</p>

<p>만약 이 처리가 없다면 해당 observer는 계속해서 요소를 관찰할 것이고,<br />
의도치 않은 서버 요청이 발생하게 되고 만다.</p>

<p>unobserve()를 추가한 뒤에는 무한스크롤이 정상적으로 동작한다.</p>

<video width="60%" controls="controls">
  <source src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/gb2_3.mp4?raw=true" type="video/mp4" />
</video>

<p><br />
네트워크 탭을 보면 서버 요청이 정상적으로 이루어지고 있음을 알 수 있다.</p>

<p><img style="margin-left: 0" src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/gb2_2.png?raw=true" alt="TIL 이미지" /></p>

<h3 id="참고자료">참고자료</h3>
<p>Mdn: Intersection_Observer_API</p>
:ET