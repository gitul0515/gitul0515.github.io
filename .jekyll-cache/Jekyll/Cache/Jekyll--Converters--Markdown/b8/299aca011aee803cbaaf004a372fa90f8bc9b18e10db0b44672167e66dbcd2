I"{;<p>그래프의 깊이우선탐색(DFS)를 활용하여 미로찾기 문제를 풀어보자.<br />
미로는 다음과 같다.</p>

<p><img src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/21_1120.jpg?raw=true" alt="미로찾기" /></p>

<h2 id="1-그래프로-표현하기">1. 그래프로 표현하기</h2>

<p>먼저 해야할 것은 미로를 그래프로 표현하는 작업이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// DFS를 활용한 미로찾기 문제</span>
<span class="c1">// 무방향 그래프 생성</span>
<span class="kd">function</span> <span class="nx">Graph</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">edges</span> <span class="o">=</span> <span class="p">{};</span> <span class="c1">// 간선을 저장하는 객체</span>
<span class="p">}</span>

<span class="c1">// 정점 삽입 함수</span>
<span class="nx">Graph</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addVertex</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">vertex</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">edges</span><span class="p">[</span><span class="nx">vertex</span><span class="p">]</span> <span class="o">=</span> <span class="p">{};</span>
<span class="p">};</span>

<span class="c1">// 간선 삽입 함수</span>
<span class="nx">Graph</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">addEdge</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">vertex1</span><span class="p">,</span> <span class="nx">vertex2</span><span class="p">,</span> <span class="nx">weight</span> <span class="o">=</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">edges</span><span class="p">[</span><span class="nx">vertex1</span><span class="p">][</span><span class="nx">vertex2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
  <span class="k">this</span><span class="p">.</span><span class="nx">edges</span><span class="p">[</span><span class="nx">vertex2</span><span class="p">][</span><span class="nx">vertex1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
<span class="p">};</span>

<span class="kd">const</span> <span class="nx">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Graph</span><span class="p">();</span>

<span class="c1">// --------- 미로를 그래프로 변환한다 ---------</span>
<span class="c1">// 정점 삽입</span>
<span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="mi">16</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">graph</span><span class="p">.</span><span class="nx">addVertex</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// 간선 삽입</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">1</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">0</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">3</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">4</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">4</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">5</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">4</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">10</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">5</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">6</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">6</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">7</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">6</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">8</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">8</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">9</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">8</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">10</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">10</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">11</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">11</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">12</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">12</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">15</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">12</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">13</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="dl">'</span><span class="s1">13</span><span class="dl">'</span><span class="p">,</span> <span class="dl">'</span><span class="s1">14</span><span class="dl">'</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">graph</span><span class="p">);</span>

<span class="kd">const</span> <span class="nx">start</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">2</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 출발점</span>
<span class="kd">const</span> <span class="nx">goal</span> <span class="o">=</span> <span class="dl">'</span><span class="s1">9</span><span class="dl">'</span><span class="p">;</span> <span class="c1">// 도착점</span>
</code></pre></div></div>

<h2 id="2-깊이우선탐색-알고리즘-적용">2. 깊이우선탐색 알고리즘 적용</h2>

<p>이제 깊이우선탐색 알고리즘을 적용하면 된다.<br />
단! 그냥 적용하면 모든 경로를 탐색하는 것일 뿐이다.<br />
내가 원하는 것은 출발점에서 도착점까지의 경로이다.<br />
도착점에 도달하면, 깊이우선탐색을 중단하도록 수정할 필요가 있다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// DFS를 활용한 미로찾기 함수</span>
<span class="nx">Graph</span><span class="p">.</span><span class="nx">prototype</span><span class="p">.</span><span class="nx">findMaze</span> <span class="o">=</span> <span class="kd">function</span> <span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">goal</span><span class="p">,</span> <span class="nx">_visited</span> <span class="o">=</span> <span class="p">{})</span> <span class="p">{</span>
  <span class="kd">let</span> <span class="nx">finish</span> <span class="o">=</span> <span class="kc">false</span><span class="p">;</span> <span class="c1">// goal에 도착했는가를 판정</span>
  <span class="kd">const</span> <span class="nx">visited</span> <span class="o">=</span> <span class="nx">_visited</span><span class="p">;</span> <span class="c1">// 방문 여부를 기록</span>

  <span class="c1">// 해당 정점을 방문한다</span>
  <span class="nx">visited</span><span class="p">[</span><span class="nx">start</span><span class="p">]</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>
  <span class="nx">process</span><span class="p">.</span><span class="nx">stdout</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s2">`</span><span class="p">${</span><span class="nx">start</span><span class="p">}</span><span class="s2"> `</span><span class="p">);</span>

  <span class="c1">// goal에 도착한 경우</span>
  <span class="k">if</span> <span class="p">(</span><span class="nx">start</span> <span class="o">===</span> <span class="nx">goal</span><span class="p">)</span> <span class="nx">finish</span> <span class="o">=</span> <span class="kc">true</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="kd">const</span> <span class="nx">adjacent</span> <span class="k">in</span> <span class="k">this</span><span class="p">.</span><span class="nx">edges</span><span class="p">[</span><span class="nx">start</span><span class="p">])</span> <span class="p">{</span> <span class="c1">// 해당 정점의 인접 정점을 탐색한다</span>
    <span class="k">if</span> <span class="p">(</span><span class="nb">Object</span><span class="p">.</span><span class="nx">hasOwnProperty</span><span class="p">.</span><span class="nx">call</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">edges</span><span class="p">[</span><span class="nx">start</span><span class="p">],</span> <span class="nx">adjacent</span><span class="p">))</span> <span class="p">{</span>
      <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">visited</span><span class="p">[</span><span class="nx">adjacent</span><span class="p">]</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="nx">finish</span><span class="p">)</span> <span class="p">{</span> <span class="c1">// 방문하지 않았고, goal에 도착하지 않았다면</span>
        <span class="nx">finish</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">findMaze</span><span class="p">(</span><span class="nx">adjacent</span><span class="p">,</span> <span class="nx">goal</span><span class="p">,</span> <span class="nx">visited</span><span class="p">);</span> <span class="c1">// 해당 정점으로부터 재귀 호출</span>
      <span class="p">}</span>
    <span class="p">}</span>
  <span class="p">}</span>
  <span class="k">return</span> <span class="nx">finish</span><span class="p">;</span>
<span class="p">};</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">findMaze</span><span class="p">(</span><span class="nx">start</span><span class="p">,</span> <span class="nx">goal</span><span class="p">);</span> <span class="c1">// 2, 9</span>
</code></pre></div></div>

<p><strong>주요 수정사항</strong>
(1) finish라는 변수를 선언하여 목표점에 도달했는지 여부를 판정한다.<br />
(2) 목표점에 도달하면 finish에 true를 할당한다.<br />
(3) finish 변수를 조건으로 추가한다. 해당 정점을 방문하지 않았고,<br />
  finish가 false인 경우만 재귀 호출을 수행한다. 그리고 재귀함수의 반환값을<br />
  finish에 저장한다.<br />
(4) 67줄: finish를 반환한다.</p>

<h2 id="3-결과">3. 결과</h2>
<p><img src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/21_1120_2.jpg?raw=true" alt="미로찾기결과" /></p>

<p>이제 미로에 빠져도 걱정할 일은 없겠어요. ㅎㅎ<br />
끝!</p>
:ET