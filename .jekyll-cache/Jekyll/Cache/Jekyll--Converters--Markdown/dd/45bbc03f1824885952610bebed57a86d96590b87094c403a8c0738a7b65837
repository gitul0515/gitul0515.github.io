I"b<p>CSS의 클래스 네임을 작성하는 일은 상당히 까다로운 일이다. 아무렇게나 작성해도 구동에는 큰 무리가 없지만, 그렇게 되면 코드의 구조를 이해하기 어렵고 유지보수가 힘들어진다. 따라서 “최대한 의미있고 구조를 쉽게 파악할 수 있는 클래스 이름”을 작성하는 일이 중요한 것이다.</p>

<p>이 문제로 고민을 하던 중, CSS의 네이밍 컨벤션인 BEM을 알게 되었다.</p>

<h3 id="bem-개요">BEM 개요</h3>

<p><img src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/22_0124_1.png?raw=true" alt="BEM 이미지" width="80%" /></p>

<p>BEM은 CSS 클래스 이름을 위한 네이밍 컨벤션으로, 여러 웹 사이트에서 널리 채택되고 있는 방법론이다. BEM은 Block, Element, Modifier를 의미하며, 다음과 같이 표기한다.</p>

<p style="font-size: 2rem">.block__element--modifier</p>

<p>예를 들어, <strong>header__btn–home</strong>에서 header는 block, img는 element, large가 modifier이다.</p>

<p>BEM은 원칙적으로 ID를 사용하지 않으며, class만을 사용한다. 또한, ‘어떻게 보이는가’ 보다는 ‘어떤 목적인가’에 따라 이름을 짓는데, 예컨대 button의 모양(.red)보다는 기능(.stop)을 고려하여 이름을 짓는 식이다. 이름을 연결할 때는 케밥 케이스(-)를 사용하거나 카멜 케이스(대문자)를 사용할 수 있다.</p>

<p>BEM은 다음과 같은 세 가지 이점을 제공한다고 말할 수 있다.</p>

<blockquote>
  <p>BEM은 목적 또는 기능을 전달한다.<br />
BEM은 구성 요소의 구조를 전달한다.<br />
BEM은 선택자 특이성을 항상 낮은 수준으로 유지한다.</p>
</blockquote>

<p>(NATHAN RAMBECK의 ‘BEM by Example’에서 인용)</p>

<p>BEM의 구성요소를 좀 더 살펴보면 다음과 같다.</p>

<h4 id="1-block">1. Block</h4>

<p>블록(Block)은 구성 요소의 가장 바깥쪽 상위 요소이다. 더 구체적으로 말하면,</p>
<blockquote>
  <p>재사용 가능한 기능적으로 독립적인 페이지 컴포넌트(A functionally independent page component that can be reused)를 의미한다.</p>
</blockquote>

<p>*NATHAN RAMBECK의 ‘BEM by Example’에서 인용</p>

<p>즉, 어딘가에 종속되지 않으며 재사용할 수 있는 요소가 블럭이다. 또한 블럭은 블럭을 감쌀 수 있다. 예를 들어 <strong>.block1 &gt; .block2</strong>와 같은 식이다.</p>

<h4 id="2-element">2. Element</h4>

<p>엘리먼트(Element)는 블럭을 구성하는 단위이다. 엘리먼트는 블록과는 달리, <strong>의존적</strong>인 특성을 갖는다. 즉, 상위 블럭 내에서만 의미를 가지므로 엘리먼트만을 떼어 다른데 사용할 수 없다.</p>

<h4 id="3-modifier">3. Modifier</h4>

<p>변경자(Modifier)는 블럭이나 엘리먼트의 속성을 의미한다. 스타일이 약간 다르거나, 다르게 기능하는 블럭 또는 엘리먼트에 사용한다.</p>

<h3 id="bem-예제">BEM 예제</h3>

<p>구체적인 예제를 통해 BEM을 이해해보자. 
BEM을 사용할 때 자주 간과되는 것들을 중심으로 살펴보겠다. NATHAN RAMBECK의 글인 ‘BEM by Example’을 참고하였다.</p>

<p>1) 단일 요소와 단일 클래스만으로도 블록이 될 수 있다.</p>

<pre><code class="language-HTML">&lt;!-- 단일 요소인 box는 블록이다 --&gt;
&lt;div class=”box”&gt;&lt;/div&gt;
</code></pre>

<p>2) 구성 요소에 변형이 있는 경우, 변경자 클래스를 사용한다.</p>
<pre><code class="language-HTML">&lt;!-- box에 --red 변경자를 추가해서 확장 --&gt;
&lt;div class=”box box--red”&gt;&lt;/div&gt;
</code></pre>

<p>이때 <strong>변경자 클래스만 사용해서는 안 되며</strong>, 기본 클래스를 유지해야 한다. 가령 아래는 틀린 사례다.</p>

<pre><code class="language-HTML">&lt;!-- INCORRECT. 기본 클래스인 box를 유지해야 한다--&gt;
&lt;div class=”box--red”&gt;&lt;/div&gt;
</code></pre>

<p>3) HTML의 하위 요소에서 클래스 이름을 생략해서는 안 된다.</p>
<pre><code class="language-HTML">&lt;!-- CORRECT --&gt;
&lt;div class=”box”&gt;
  &lt;img class="box__img" src="sample.jpg"&gt;
  &lt;button class="box__btn"&gt;&lt;/button&gt;
&lt;/div&gt;

&lt;!-- INCORRECT --&gt;
&lt;div class=”box”&gt;
  &lt;img src="sample.jpg"&gt;
  &lt;button&gt;&lt;/button&gt;
&lt;/div&gt;
</code></pre>

<p>4) BEM 클래스 이름은 기본 블록 이름과 하나의 요소 이름만 허용한다.</p>
<pre><code class="language-HTML">&lt;!-- CORRECT --&gt;
&lt;ul class="top-menu"&gt;
  &lt;li class="top-menu__list"&gt;
    &lt;a class="top-menu__item" href="#"&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- INCORRECT --&gt;
&lt;ul class="top-menu"&gt;
  &lt;li class="top-menu__list"&gt;
    &lt;a class="top-menu__list__item" href="#"&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>5) BEM은 케밥 케이스 또는 카멜 케이스와 접목할 수 있다.</p>

<pre><code class="language-HTML">&lt;!-- 케밥 케이스 --&gt;
&lt;nav class="nav-container"&gt;
  &lt;ul class="topMenu"&gt;
    &lt;li class="topMenu__list"&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;

&lt;!-- 카멜 케이스 --&gt;
&lt;nav class="navContainer"&gt;
  &lt;ul class="topMenu"&gt;
    &lt;li class="topMenu__list"&gt;&lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
</code></pre>

<h3 id="마치며">마치며</h3>

<h3 id="참고자료">참고자료</h3>
<p>https://naradesign.github.io/bem-by-example.html
https://nykim.work/15</p>

<p>(틀린 것이 있다면 꼭 지적해 주세요. 감사히 배우겠습니다)</p>
:ET