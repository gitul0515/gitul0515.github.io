I"9<p>HTML 태그의 이름을 잘 작성하는 일은 상당히 어려운 일인 것 같다. 물론 아무렇게나 작성을 해도 구동에는 무리가 없지만, 코드의 규모가 커질수록 구조를 이해하기 어려워져 유지보수가 매우 힘들어진다. 따라서 “최대한 의미있고 구조를 쉽게 파악할 수 있는 태그 이름”을 작성하는 일이 중요한 것이다. 이 문제로 고민을 하던 중, HTML 및 CSS의 네이밍 컨벤션인 BEM을 알게 되었다.</p>

<h3 id="bem이란">BEM이란</h3>

<p>&lt;img src=&gt;</p>

<p>BEM은 CSS 클래스 이름을 위한 규칙 표준이다. 여러 웹 사이트에서 널리 채택되었다.</p>

<p>BEM은 Block, Element, Modifier를 의미한다. 다음과 같이 표기한다.</p>

<p><code class="language-plaintext highlighter-rouge">.block__element--modifier</code></p>

<p>예를 들어, <code class="language-plaintext highlighter-rouge">photo__img--large</code>에서<br />
photo는 block, img는 element, large가 modifier이다.</p>

<p>원칙적으로 BEM은 ID를 사용하지 않으며, class만을 사용한다.<br />
또한, ‘어떻게 보이는가’ 보다는 ‘어떤 목적인가’에 따라 이름을 짓는다.<br />
예컨대 button 태그의 모양(.red)보다는 기능(.start)을 고려하여 이름을 짓는 식이다.
이름을 연결할 때는 케밥 케이스(-) 또는 카멜 케이스(대문자)를 사용할 수 있다.</p>

<p>BEM은 다음과 같은 세 가지 이점을 제공한다고 할 수 있다.
(NATHAN RAMBECK의 ‘BEM by Example’에서 인용)</p>

<blockquote>
  <p>BEM은 목적 또는 기능을 전달한다.<br />
BEM은 구성 요소의 구조를 전달한다.<br />
BEM은 선택자 특이성을 항상 낮은 수준으로 유지한다.</p>
</blockquote>

<h4 id="1-block">1. Block</h4>

<p>블록(Block)은 구성 요소의 가장 바깥쪽 상위 요소이다.<br />
더 구체적으로 말하면,</p>
<blockquote>
  <p>재사용 가능한 기능적으로 독립적인 페이지 컴포넌트
(A functionally independent page component that can be reused)</p>
</blockquote>

<p>즉, 어딘가에 종속되지 않으며 재사용할 수 있는 요소가 블럭이다.</p>

<p>또한 블럭은 블럭을 감쌀 수 있다. <code class="language-plaintext highlighter-rouge">.block1 &gt; .block2</code>와 같은 식이다.</p>

<h4 id="2-element">2. Element</h4>

<p>엘리먼트(Element)는 블럭을 구성하는 단위이다.<br />
엘리먼트는 <strong>의존적</strong>이다.<br />
즉, 상위 블럭 내에서만 의미를 가지므로 엘리먼트만을 떼어 다른데 쓸 수 없다.</p>

<h4 id="3-modifier">3. Modifier</h4>

<p>변경자(Modifier)는 블럭이나 엘리먼트의 속성을 의미한다.<br />
스타일이 약간 다르거나, 다르게 기능하는 블럭 또는 엘리먼트에 사용한다.</p>

<h3 id="예제로-이해하기">예제로 이해하기</h3>

<p>구체적인 예제를 통해 BEM을 이해해보자.
(NATHAN RAMBECK의 글인 ‘BEM by Example’을 참고하였다)</p>

<ol>
  <li>단일 요소와 단일 클래스만으로도 블록이 될 수 있다.</li>
</ol>

<pre><code class="language-HTML">&lt;!-- 단일 요소인 box는 블록이다 --&gt;
&lt;div class=”box”&gt;&lt;/div&gt;
</code></pre>

<ol>
  <li>구성 요소에 변형이 있는 경우, 변경자 클래스를 사용한다.
```HTML
<!-- box에 --red 변경자를 추가해서 확장 --></li>
</ol>
<p>&lt;div class=”box box–red”&gt;&lt;/div&gt;</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
  **변경자 클래스만 사용해서는 안 되며**, 기본 클래스를 유지해야 한다.
  아래는 틀린 사례다.

```HTML
&lt;!-- INCORRECT. 기본 클래스인 box를 유지해야 한다--&gt;
&lt;div class=”box--red”&gt;&lt;/div&gt;
</code></pre></div></div>

<ol>
  <li>HTML의 하위 요소에서 클래스 이름을 생략해서는 안 된다.</li>
</ol>

<pre><code class="language-HTML">&lt;!-- CORRECT --&gt;
&lt;div class=”box”&gt;
  &lt;img class="box__img" src="sample.jpg"&gt;
  &lt;button class="box__btn"&gt;&lt;/button&gt;
&lt;/div&gt;

&lt;!-- INCORRECT --&gt;
&lt;div class=”box”&gt;
  &lt;img src="sample.jpg"&gt;
  &lt;button&gt;&lt;/button&gt;
&lt;/div&gt;
</code></pre>

<ol>
  <li>BEM 클래스 이름은 기본 블록 이름과 하나의 요소 이름만 허용한다.</li>
</ol>

<pre><code class="language-HTML">&lt;!-- CORRECT --&gt;
&lt;ul class="top-menu"&gt;
  &lt;li class="top-menu__list"&gt;
    &lt;a class="top-menu__item" href="#"&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;!-- INCORRECT --&gt;
&lt;ul class="top-menu"&gt;
  &lt;li class="top-menu__list"&gt;
    &lt;a class="top-menu__list__item" href="#"&gt;&lt;/a&gt;
  &lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<ol>
  <li>BEM은 케밥 케이스 또는 카멜 케이스와 접목할 수 있다. 
<!-- 케밥 케이스 --></li>
</ol>
<nav class="nav-container">
  <ul class="topMenu">
    <li class="topMenu__list"></li>
  </ul>
</nav>

<!-- 카멜 케이스 -->
<nav class="navContainer">
  <ul class="topMenu">
    <li class="topMenu__list"></li>
  </ul>
</nav>

<h3 id="참고자료">참고자료</h3>
<p>https://naradesign.github.io/bem-by-example.html
https://nykim.work/15</p>

<p>(제 글에서 틀린 것이 있다면 꼭 지적해 주세요. 감사히 배우겠습니다)</p>
:ET