I"z<p>“김영한” 님의 인프런 강의 “모든 개발자를 위한 HTTP 웹 기본 지식”을 듣고 정리한 글입니다.</p>

<h3 id="http-주요-메서드">HTTP 주요 메서드</h3>
<h4 id="1-get">1. GET</h4>
<ul>
  <li>리소스 조회.</li>
  <li>서버에 전달하고 싶은 데이터는 <strong><u>query 파라미터</u></strong>를 통해서 전달.</li>
  <li>메시지 body를 사용해서 데이터를 전달할 수 있으나, 권장하지 않는다.<br />
지원하지 않는 서버가 많기 때문이다.</li>
</ul>

<h4 id="2-post">2. POST</h4>
<ul>
  <li>요청 데이터 처리, 주로 등록에 사용.</li>
  <li><strong><u>메시지 body</u></strong>를 통해 서버로 데이터 전달.</li>
  <li>POST는 의미가 넓다.<br />
POST 요청이 오면 <strong>요청 데이터를 어떻게 처리할지 리소스마다 따로 정해야 한다</strong>.</li>
  <li>주요 사용
    <ul>
      <li>신규 리소스 등록</li>
      <li>요청 데이터 처리 
단순히 값 변경을 넘어 프로세스의 상태가 변경되는 경우.<br />
POST의 결과로 새로운 리소스가 생성되지 않을 수도 있다.</li>
      <li>다른 메서드로 처리하기 애매한 경우<br />
<strong><u>애매하면 POST. 사실상 모든 것을 할 수 있다.</u></strong><br />
(실무에서는 리소스만으로 URI를 설계할 수 없다. 컨트롤 URI가 필요.)</li>
    </ul>
  </li>
</ul>

<h4 id="3-put">3. PUT</h4>
<ul>
  <li>리소스를 ‘완전히’ 대체, 해당 리소스가 없으면 생성.<br />
쉽게 말해 덮어버리는 것.</li>
  <li><strong>PUT을 요청하는 클라이언트는 리소스를 식별한다.</strong><br />
즉, 클라이언트가 리소스의 위치를 알고 URI를 지정한다. (POST와의 차이점)</li>
</ul>

<h4 id="4-patch">4. PATCH</h4>
<ul>
  <li>리소스 부분 수정</li>
  <li>PATCH가 지원되지 않는 경우가 간혹 있음. POST를 쓰면 된다.</li>
</ul>

<h4 id="5-delete">5. DELETE</h4>
<ul>
  <li>리소스 삭제</li>
</ul>

<h3 id="http-메서드의-속성">HTTP 메서드의 속성</h3>
<h4 id="1-안전safe">1. 안전(Safe)</h4>
<ul>
  <li>호출해도 리소스를 변경하지 않는다.</li>
  <li>GET, HEAD는 안전하다.</li>
</ul>

<h4 id="2-멱등idempotent">2. 멱등(Idempotent)</h4>
<ul>
  <li>한 번 호출하든 100번 호출하든 결과가 똑같다.</li>
  <li>GET, PUT, DELETE는 멱등하다. POST는 멱등하지 않다.</li>
  <li>자동 복구 메커니즘에 필요하다.<br />
  (서버가 정상 응답을 못주었을 때, 클라이언트가 같은 요청을 다시 해도 되는가?를 판단)</li>
  <li>외부 요인으로 중간에 리소스가 변경되는 것까지는 고려하지 않는다.</li>
</ul>

<h4 id="3-캐시가능cacheable">3. 캐시가능(Cacheable)</h4>
<ul>
  <li>“응답 결과 리소스를 캐시해서 사용해도 되는가?”</li>
  <li>GET, HEAD, POST, PATCH는 캐시 가능.<br />
실제로는 GET, HEAD 정도만 캐시로 사용.
POST, PATCH는 구현이 쉽지 않기 때문이다.</li>
</ul>

<h3 id="서버로-데이터-전송하기">서버로 데이터 전송하기</h3>
<h4 id="1-데이터-전달-방식">1. 데이터 전달 방식</h4>
<ul>
  <li>쿼리 파라미터를 통한 데이터 전송
    <ul>
      <li>GET</li>
      <li>주로 정렬 필터(검색어)</li>
    </ul>
  </li>
  <li>메시지 바디를 통한 데이터 전송
    <ul>
      <li>POST, PUT, PATCH</li>
      <li>회원 가입, 상품 주문, 리소스 등록, 리소스 변경</li>
    </ul>
  </li>
</ul>

<h4 id="1-정적-데이터-조회">1. 정적 데이터 조회</h4>
<ul>
  <li>이미지, 정적 텍스트 문서</li>
  <li>조회는 GET 사용</li>
  <li>일반적으로 쿼리 파라미터 없이 리소스 경로로 단순하게 조회 가능</li>
</ul>

<h4 id="2-동적-데이터-조회">2. 동적 데이터 조회</h4>
<ul>
  <li>쿼리 파라미터 사용</li>
  <li>주로 검색, 게시판 목록에서 정렬 필터(검색어)</li>
  <li>조회는 GET 사용</li>
</ul>

<h4 id="3-html-form-데이터-전송">3. HTML Form 데이터 전송</h4>
<ul>
  <li>Form의 submit 버튼이 눌리면, 웹 브라우저가 http 메시지를 생성한다.</li>
  <li>get은 데이터가 쿼리 파라미터로 전달된다. 
리소스를 변경하는 곳에서 get을 사용하면 안 된다.</li>
  <li>Content-Type: multipart/form-data
파일 업로드와 같은 바이너리 데이터 전송 시 사용
다른 종류의 여러 파일과 폼의 내용 함께 전송 가능</li>
  <li>HTML Form 전송은 Get, Post만 지원한다.</li>
</ul>

<h3 id="참고자료">참고자료</h3>
<p>모든 개발자를 위한 HTTP 웹 기본 지식 - 인프런 | 강의</p>
:ET