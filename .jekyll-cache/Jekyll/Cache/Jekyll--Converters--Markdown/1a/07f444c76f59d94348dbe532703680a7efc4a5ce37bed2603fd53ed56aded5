I"M<h2 id="개요">개요</h2>

<p>Floyd의 최단 경로 알고리즘은 그래프의 모든 정점 간의 최단 경로를 한 번에 찾아준다.<br />
알고리즘 자체는 매우 간단하다. 2차원 배열 A를 이용하여 3중 반복을 하는 구성이다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Floyd의 최단 경로 알고리즘 의사 코드</span>
<span class="nx">floyd</span><span class="p">(</span><span class="nx">G</span><span class="p">):</span>
  <span class="k">for</span> <span class="nx">k</span> <span class="o">&lt;-</span> <span class="mi">0</span> <span class="nx">to</span> <span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span>
    <span class="k">for</span> <span class="nx">i</span> <span class="o">&lt;-</span> <span class="mi">0</span> <span class="nx">to</span> <span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span>
      <span class="k">for</span> <span class="nx">j</span> <span class="o">&lt;-</span> <span class="mi">0</span> <span class="nx">to</span> <span class="nx">n</span> <span class="o">-</span> <span class="mi">1</span>
        <span class="nx">A</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="nx">min</span><span class="p">(</span><span class="nx">A</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">],</span> <span class="nx">A</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">k</span><span class="p">]</span> <span class="o">+</span> <span class="nx">A</span><span class="p">[</span><span class="nx">k</span><span class="p">][</span><span class="nx">j</span><span class="p">])</span>
</code></pre></div></div>
<p>A<sup>k</sup>[i][j]를 0부터 k까지의 정점만을 이용한 정점 i에서 j까지의 최단 경로라고 하자.<br />
이 A<sup>k</sup>[i][j]는 다음의 2가지로 나누어 생각할 수 있다.</p>

<p><img src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/21_1122_1.png?raw=true" alt="Floyd" /></p>

<ol>
  <li>
    <p>정점 k를 거치지 않는 경우: 기존 경로 유지<br />
이때 최단 거리는 A<sup>k-1</sup>[i][j]가 된다. (기존 경로 유지)</p>
  </li>
  <li>
    <p>정점 k를 거치는 경우: 경로 변경<br />
i에서 k까지의 최단거리 A<sup>k-1</sup>[i][k]에다가 k에서 j까지의 최단거리인 A<sup>k-1</sup>[j][k]를 더한 값이 된다.</p>
  </li>
</ol>

<p>즉, A<sup>k</sup>[i][j] = min(A<sup>k-1</sup>[i][j], A<sup>k-1</sup>[i][k] + A^k[k][j])가 된다.</p>

<p>이는 정점 k를 경유하는 것이 더 짧은 경로이면 A^k-1[i][j]의 값이 변경되고,<br />
그렇지 않으면 이전 값을 유지한다는 의미이다.</p>

<h2 id="자바스크립트로-구현">자바스크립트로 구현</h2>

<p>자바스크립트로 구현할 그래프는 다음과 같다.</p>

<p><img src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/21_1122_2.png?raw=true" alt="그래프" /></p>

<p>이 그래프를 인접 행렬로 구현하기 위해 클래스를 작성한다.<br />
위에서 설명한 A 배열은 distance 배열이 담당하도록 하였다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Floyd의 최단 경로 알고리즘</span>
<span class="c1">// 무방향 그래프 (인접 행렬)</span>
<span class="kd">class</span> <span class="nx">Graph</span> <span class="p">{</span>
  <span class="kd">constructor</span><span class="p">(</span><span class="nx">size</span> <span class="o">=</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">=</span> <span class="nx">size</span><span class="p">;</span>

    <span class="c1">// 2차원 배열 생성</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">matrix</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 원본 데이터</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="nx">size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">.</span><span class="nx">push</span><span class="p">([]);</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="nx">size</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">i</span> <span class="o">===</span> <span class="nx">j</span><span class="p">)</span> <span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="c1">// 자신은 0으로 초기화</span>
        <span class="k">else</span> <span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="kc">Infinity</span><span class="p">;</span> <span class="c1">// 다른 정점들은 Infinity로 초기화</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">distance</span> <span class="o">=</span> <span class="p">[];</span> <span class="c1">// 최단 경로를 저장할 배열</span>
  <span class="p">}</span>

  <span class="c1">// 간선 삽입 메서드</span>
  <span class="nx">addEdge</span><span class="p">(</span><span class="nx">vertex1</span><span class="p">,</span> <span class="nx">vertex2</span><span class="p">,</span> <span class="nx">weight</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="nx">vertex1</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">||</span> <span class="nx">vertex2</span> <span class="o">&gt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span> <span class="o">-</span> <span class="mi">1</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="dl">'</span><span class="s1">Invalid vertex</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nx">vertex1</span> <span class="o">===</span> <span class="nx">vertex2</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">throw</span> <span class="k">new</span> <span class="nx">TypeError</span><span class="p">(</span><span class="dl">'</span><span class="s1">Same vertex</span><span class="dl">'</span><span class="p">);</span>
    <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">[</span><span class="nx">vertex1</span><span class="p">][</span><span class="nx">vertex2</span><span class="p">]</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
      <span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">[</span><span class="nx">vertex2</span><span class="p">][</span><span class="nx">vertex1</span><span class="p">]</span> <span class="o">=</span> <span class="nx">weight</span><span class="p">;</span>
    <span class="p">}</span>
  <span class="p">}</span>
</code></pre></div></div>

<p>이어서 결과를 출력하는 메서드, 그리고 floyd의 최단 경로 알고리즘을 구현하였다.<br />
위에서 설명한 의사 코드와 비교해보자.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  <span class="c1">// 행렬을 출력하는 메서드</span>
  <span class="nx">print</span><span class="p">(</span><span class="nx">matrix</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="kd">let</span> <span class="nx">result</span> <span class="o">=</span> <span class="dl">''</span><span class="p">;</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">===</span> <span class="kc">Infinity</span><span class="p">)</span> <span class="nx">result</span> <span class="o">+=</span> <span class="dl">'</span><span class="s1">* </span><span class="dl">'</span><span class="p">;</span>
        <span class="k">else</span> <span class="nx">result</span> <span class="o">+=</span> <span class="s2">`</span><span class="p">${</span><span class="nx">matrix</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]}</span><span class="s2"> `</span><span class="p">;</span>
      <span class="p">}</span>
      <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
    <span class="p">}</span>
  <span class="p">}</span>

  <span class="c1">// floyd의 최단 경로 알고리즘</span>
  <span class="nx">floyd</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// 최단경로를 갱신하여 저장하는 배열</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">distance</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">matrix</span><span class="p">;</span> <span class="c1">// 초기화</span>

    <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">k</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">k</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span> <span class="nx">k</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
      <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">i</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">i</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span> <span class="nx">i</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">for</span> <span class="p">(</span><span class="kd">let</span> <span class="nx">j</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span> <span class="nx">j</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">size</span><span class="p">;</span> <span class="nx">j</span><span class="o">++</span><span class="p">)</span> <span class="p">{</span>
          <span class="k">if</span> <span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">k</span><span class="p">]</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="p">[</span><span class="nx">k</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">&lt;</span> <span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">])</span> <span class="p">{</span>
            <span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">j</span><span class="p">]</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="p">[</span><span class="nx">i</span><span class="p">][</span><span class="nx">k</span><span class="p">]</span> <span class="o">+</span> <span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="p">[</span><span class="nx">k</span><span class="p">][</span><span class="nx">j</span><span class="p">];</span>
          <span class="p">}</span>
        <span class="p">}</span>
      <span class="p">}</span>
    <span class="p">}</span>
    <span class="k">this</span><span class="p">.</span><span class="nx">print</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">distance</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<p>이제 간선을 삽입하여 원본 그래프를 구현한 뒤, floyd 메서드를 호출한다.</p>

<div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">graph</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Graph</span><span class="p">(</span><span class="mi">7</span><span class="p">);</span>
<span class="c1">// 간선 삽입</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="mi">7</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">3</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">10</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">2</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">11</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">9</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">4</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">addEdge</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">5</span><span class="p">);</span>
<span class="nx">graph</span><span class="p">.</span><span class="nx">floyd</span><span class="p">();</span>
</code></pre></div></div>

<p>결과는?</p>

<p><img src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/21_1122_3.png?raw=true" alt="결과" /></p>

<h2 id="시간복잡도">시간복잡도</h2>

<p>Floyd 알고리즘은 삼중 for문이 존재하므로, 시간복잡도는 O(n^3)이다. (n은 정점을 의미)</p>

<p>참고로 Dijkstra의 알고리즘을 n번 반복하면 모든 정점상의 최단경로를 구할 수 있다. 이 경우 전체 복잡도는 O(n^3)으로 Floyd와 동일하다.</p>

<h2 id="정리"><strong>정리</strong></h2>
<ul>
  <li>
    <dl>
      <dt>Dijkstra의 알고리즘</dt>
      <dd>하나의 정점으로부터 모든 다른 정점까지의 최단 경로를 구할 때</dd>
    </dl>
  </li>
  <li>
    <dl>
      <dt>Floyd의 알고리즘</dt>
      <dd>모든 정점 간의 최단경로를 구할 때</dd>
    </dl>
  </li>
</ul>

<h2 id="참고references">참고(References)</h2>
<p>천인국, “C언어로 쉽게 풀어 쓴 자료구조”, 경기도: 생능, 2019, pp. 425-430</p>
:ET