I"<p><img src="https://github.com/gitul0515/gitul0515.github.io/blob/main/_posts/image/TIL.png?raw=true" alt="TIL 이미지" /></p>

<h4 id="리액트의-특징">리액트의 특징</h4>
<ol>
  <li>
    <p>Reactive Programming<br />
React는 상태를 관찰하고 변화가 발생할 경우 
연관된 곳에서 연산을 수행한다.</p>
  </li>
  <li>
    <p>View만을 관리하는 라이브러리</p>
  </li>
  <li>
    <p>컴포넌트</p>

    <ul>
      <li>재사용이 가능한 독립적인 객체.</li>
      <li>HTML, Style, JavaScript, Event, State 등을 포함</li>
      <li>트리 구조로 구성할 수 있다.
<br /></li>
    </ul>
  </li>
  <li>
    <p>Virtual DOM</p>
    <ul>
      <li>필요한 부분만 렌더링한다. 빠른 성능.</li>
      <li>그러나 DOM을 조작하는 것보다 항상 빠른 것은 아니다.<br />
대부분의 경우에서 빠를 뿐이다.</li>
      <li><u>성능보다는 개발을 편리하게 하기 위한 것</u>.<br />
(성능 최적화를 하지 않아도 괜찮은 성능이 나온다)</li>
    </ul>
  </li>
</ol>

<h4 id="어떻게-공부해야할까">어떻게 공부해야할까?</h4>

<ul>
  <li>당장 너무 딥하게 공부하지 마라.</li>
  <li>“Easy to learn, Hard to master”</li>
  <li>재사용성과 확장성을 처음부터 생각하는 것은 쉽지 않다.</li>
</ul>

<h4 id="create-react-app">create-react-app</h4>

<ul>
  <li>npx, npm, yarn</li>
  <li>JSX의 html 태그들은 가상 DOM이라고 할 수 있다.</li>
  <li>JSX가 기존 html과 다른 점
    <ol>
      <li>class =&gt; className</li>
      <li>Return하는 최상위 요소는 1개이어야 한다.<br />
React.Fragment</li>
      <li>표현식은 {}로 감싼다.<br />
조건문, 반복문을 사용할 수 있다.<br />
반복문을 사용할 때는 반드시 key를 명시해야 한다.</li>
    </ol>
  </li>
</ul>

<h4 id="컴포넌트-이론">컴포넌트 이론</h4>

<ul>
  <li>데이터는 상위에서 하위로 흐른다. 단방향.</li>
  <li>UI를 추상적으로 바라보기<br />
공통점을 찾는 것이 추상성과 재사용의 시작이다.<br />
지나치게 추상화하지 않는 것도 중요하다.</li>
  <li>도메인, 역할, 크기 등으로 분류하기</li>
  <li>React의 컴포넌트는 함수이다.<br />
Props를 입력받아서 JSX를 출력한다.</li>
</ul>

<h4 id="컴포넌트-실습">컴포넌트 실습</h4>

<ul>
  <li><u>props 데이터가 문자열이면 ""로 감싸고, 문자열이 아니면 {}로 감싼다.</u></li>
  <li><u>props 데이터의 default 값을 선언할 수 있다.</u><br />
defaultProps, 전달 인자</li>
  <li>
    <p><u>props 데이터의 Type을 선언할 수 있다.</u><br />
propTypes, PropTypes</p>

    <p>PropTypes.node.isRequired</p>
  </li>
  <li><u>props.children</u><br />
A 컴포넌트 사이에 B 컴포넌트가 있을 때,<br />
A 컴포넌트에서 B 컴포넌트 내용을 조회할 때 사용한다.</li>
</ul>

<h4 id="분기와-반복">분기와 반복</h4>

<ul>
  <li>
    <p>if, for와 같은 문법은 잘 사용하지 않고 삼항연산자와 map, filter 등을 사용한다.</p>
  </li>
  <li>
    <p><u>jsx의 {}에서는 표현식만 작성할 수 있다</u>. 선언문은 작성할 수 없다.</p>
  </li>
</ul>

<h4 id="상태와-이벤트-바인딩">상태와 이벤트 바인딩</h4>

<ul>
  <li>PropTypes.func</li>
  <li>이벤트 버스</li>
</ul>

<h4 id="useeffect">useEffect</h4>

<ul>
  <li><u>무언가 변화가 있을 때 감지하여 반응하는 Hook</u></li>
  <li>useEffect(콜백 함수, 배열)<br />
콜백 함수: 반응, 배열: 감지 대상</li>
  <li><u>아무것도 감지하지 않을 경우(빈 배열일 경우) 컴포넌트가 처음 로드될 때 한 번 실행.</u><br />
API 호출, 전역 이벤트 바인딩 등</li>
  <li><u>콜백함수 리턴</u><br />
컴포넌트가 제거될 때 발생한다.<br />
전역 이벤트를 바인딩한 경우 삭제해야 한다.</li>
</ul>

<h4 id="useref">useRef</h4>

<ol>
  <li>DOM에 직접 접근할 때 사용한다.<br />
(리액트는 DOM으로의 직접 접근을 허용하지 않는다)</li>
  <li>지역 변수로 사용할 때 사용한다.</li>
</ol>

<ul>
  <li>
    <p>useState는 값이 변경될 때 다시 렌더링을 한다.<br />
<u>useRef는 값이 변경되더라도 다시 렌더링을 하지 않는다.</u></p>
  </li>
  <li>
    <p>inputRef.current</p>
  </li>
  <li>
    <p><u>상위 컴포넌트에서 하위 컴포넌트로 Ref 요소를 전달</u>할 수 있다.<br />
React.forwardRef를 사용한다.</p>
  </li>
  <li>
    <p>let이 아닌 useRef를 사용하는 이유<br />
let을 사용해 변수를 선언하면 함수가 다시 불려질때마다 초기화된다.<br />
반면에 useRef는 값이 유지된다.</p>
  </li>
</ul>

<h3 id="참고자료">참고자료</h3>

<p>데브코스 49일차 강의</p>
:ET