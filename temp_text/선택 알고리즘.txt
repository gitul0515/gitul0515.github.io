



선택 알고리즘(Selection algorithm) 활용 문제

- 기준 숫자에서 10번째로 근접한 원소 찾기



## 선택 알고리즘

선택 알고리즘(Selection algorithm)에 관해서 정리해보자.  

(선택 정렬(Selection sort)과는 무관하므로 주의)  

이 알고리즘을 사용하면

숫자들을 정렬하지 않고도 k번째로 작은 값을 구하는 것이 가능하다.

(시간복잡도: 평균적인 경우 - O(n))


핵심은 퀵 정렬의 파티션 함수를 응용하는 것에 있다.

피벗으로 배열의 왼쪽과 오른쪽을 분할해 나가되, 

피벗이 배열에서 몇 번째로 작은 원소인가를 판단하여 탐색의 범위를 좁혀 나가는 것이다. 

select(A, p, r, i)
{
  if (p = r) then return A[p]; 
  q<-partition(A, p, r);
  k<-q-p+1;
  if (i <k) then return select(A, p, q-1, i);
  else if (i=k) then return A[q];
  else return select(A, q+1, r, i-k);
}


![선택알고리즘](?raw=true)

## 응용 문제

이 선택 알고리즘을 사용하여 다음의 문제를 풀어보자. 

> 샘플 데이터 '21, 10, 34, 75, 41, 30, 12, 19, 56, 50, 7, 43, 28, 91, 83, 81' 중에서  
> 45와 10번째로 값이 근접한 숫자를 찾아라.









시간복잡도: 평균적인 경우 O(n), 최악의 경우 O(n**2)




 수행한다. 





피벗이 






정렬하지 않고 

정렬하지 않고 



퀵 정렬의 


선택 알고리즘은 정말 혁신이다.

배열을 정렬하지 않고도 k번째로 작은 값을 구할 수 있다니! 

그 덕분에 선택 알고리즘은 선형시간에 



원하는 인덱스의 