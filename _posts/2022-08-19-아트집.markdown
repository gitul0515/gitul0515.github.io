---
layout: post
title: '<아트집> 최종 프로젝트 회고'
date: 2022-08-19 11:12:52 +0900
categories: 프로젝트리뷰
tags: [최종프로젝트, 리액트, 데브코스]
---
    
## 서론

데브코스 5개월의 여정을 끝맺을 대망의 최종 프로젝트…  
팀원들과 함께 아이디어를 논의하던 것이 엊그제였던 것 같은데   
벌써 한 달이라는 시간이 지나가고 모든 것이 마무리되었다.   
프로젝트를 하면서 무척이나 힘들었지만,  
동시에 개발, 협업, 프로젝트 관리 등 많은 것을 배울 수 있던 귀중한 시간이었다.   

## 팀 소개 & 나의 역할  
우리는 프론트엔드 4명, 백엔드 4명으로 구성된 팀이었다.  
그 중 나는 프론트엔드 팀장을 맡았으며,  
개발에서는 **'후기 작성 & 수정 페이지', '마이 페이지', '프로필 수정 페이지', ‘헤더’**를 구현하였고,   
그 외 **프로젝트 환경 세팅, Axios를 통한 API 연동, SWR의 도입** 등을 맡았다.   
한편, 팀장이다보니 개발 외적으로도 해야 할 일들이 많았다.   
팀장으로서 회의 진행, 일정 관리, 백엔드와의 소통 등의 업무를 주로 담당하였다.   

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled.png)

## 프로젝트 소개  
  
프로젝트의 이름은 Art.zip(아트집)으로,   
미술 전시회에 관한 정보를 조회하고 후기를 공유할 수 있는 서비스이다.   

### 전시회 조회 및 검색
![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%201.png)

### 후기 작성 및 공유

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%202.png)

아래는 프로젝트의 개요를 정리한 것이다.   

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%203.png)

자세한 것은 github의 README를 참고해주시기 바란다.   

[https://github.com/prgrms-web-devcourse/Team-BackFro-Project](https://github.com/prgrms-web-devcourse/Team-BackFro-Project)

## 프로젝트 관리  

### 문서화  
문서화를 꼼꼼히 하기 위해 노력하였다.   
개발만큼이나 문서의 정리도 중요한 업무이자 역량이라고 생각했기 때문이다.   
특히 중간 프로젝트에서는 개발에 쫓겨 문서 정리를 약간 소홀히 한 경향이 있었는데,  
이 점을 반성하여 문서화에 신경을 썼다.   
노션을 통해 주요 문서들과 회의록을 체계적으로 정리하였다.    

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%204.png)

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%205.png)

### 애자일 스크럼  
한편, 애자일 스크럼 방식을 도입하여  
3~4일의 스프린트 단위로 프로젝트를 진행하였다.  
또한, Github의 Projects를 통해 일일 스크럼을 진행하였으며,  
당일의 안건을 논의하고 작업 현황을 관리하였다.  

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%206.png)

### 프로젝트 일정  
백엔드와의 협업이 필수이다보니 사전에 논의해야할 것들이 무척 많았으며,  
작업을 병렬적으로 진행하면서도, 공통 일정을 조율하며 합을 맞추는 것이 꽤나 어려웠다.   
이 점은 느낀점에서 더 후술하도록 하겠다.   
프로젝트 기간은 총 26일이었으며, 아래는 전체 일정을 표로 정리한 것이다.    

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%207.png)

## 기술 스택  

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%208.png)

특히나 3가지 기술 - 타입스크립트, Next.js, Ant design은   
이번 프로젝트에서 처음 도입했던 기술이었고, 여러모로 무척 인상깊었다.   
느낀점을 중심으로 회고하겠다.   

### 1. 타입스크립트  
타입스크립트를 사용함으로써 협업을 더 원활하게 진행할 수 있었다.   
특히 API 명세에 따른 타입들을 정의함으로써 데이터를 더 명확하게 이해할 수 있었고,   
타입 추론, 자동 완성 등의 기능을 적극적으로 사용할 수 있었다.   
또한, 컴포넌트의 props에도 타입을 정의함으로써 코드를 한층 견고하고 안정적으로 만들 수 있었다.   
또 하나 덧붙이고 싶은 것은,  
`Cannot read properties of undefined` 에러가 획기적으로 줄었다는 것이다.   
undefined의 속성에 접근하려고 할 때 발생하는 바로 그 에러다!   
타입스크립트가 이와 같은 타입 에러를 컴파일 전에 막아주었기 때문에,   
디버깅에 소모하는 시간을 크게 줄일 수 있었다. 매우 만족스러웠던 부분이다.   
  
한편, 타입스크립트의 한계도 어렴풋이 느꼈던 것 같다.   
Object.keys를 사용 시, 무조건 string[]으로 타입 추론이 난다던가,  
생소한 타입인 경우(예를 들어 Ant design의 타입 등),   
타입스크립트가 타입 추론을 올바르게 못 하는 경우가 종종 있었다.  
그러한 이슈들 때문에 시간이 꽤나 소비되었고, 어쩔 수 없이 타입 단언을 사용해야만 했다.   
타입스립트가 완벽하지 않다는 것을 깨달았던 부분이다.   
  
또한, 타입스크립트는 개발자의 타입 실수는 막아주지만,   
사용자(유저)의 타입 실수는 막아주지 못한다. (당연한 말일지도 모르겠다)   
예를 들어, 사용자가 폼을 입력할 때 입력값이 올바른 타입인지는 막아주지 못한다.   
(그 때는 이미 타입스크립트가 아닌, 트랜스파일링된 자바스크립트이기 때문이다)  
따라서 별도의 validation을 구현해야만 했다.   
이 또한 타입스크립트의 한계를 어렴풋이 느꼈던 부분이다.   
  
### 2. Next.js  
  
CRA로 개발했던 중간 프로젝트와는 달리,   
이번 프로젝트에서는 SSR 프레임워크인 Next.js를 도입하였다.   
Next.js를 도입한 까닭은 우선 SEO 때문이다.   
우리 사이트는 ‘전시회의 정보를 제공해주는 사이트’이므로,  
검색 엔진에 유리하게 노출되는 것이 특히 중요했고, 따라서 SEO가 중요하다고 판단하였다.   
한편, 그 외에도 Next.js는 많은 이점들을 안겨주었다.   
페이지 기반 라우팅 시스템, Pre-render, SSR, SSG을 통한 성능 향상,  
Next/image 컴포넌트를 사용한 이미지 최적화 지원 등이 그것이었다.   
  
한편, Next.js가 익숙하지 않았기 때문에 개발 도중에 시행착오를 꽤 겪었다.   
대표적인 것은 인증 문제였다.    
초기에는 토큰을 로컬 스토리지에 저장하여 관리하기로 했는데,   
서버에서 로컬 스토리지에 접근할 수 없으므로 SSR 시 문제가 발생하였다.   
결국 로컬 스토리지가 아닌 쿠키에 토큰을 저장하는 것으로 뒤늦게 바꾸어야만 했다.   
  
그 외에도, react-hydration-error가 종종 발생해서 골치를 썩였다.   
이것은 Next.js에 의해 pre-rendering된 리액트 트리와   
브라우저의 리액트 트리가 불일치해서 발생하는 에러였는데,   
생전 처음 보는 에러였기 때문에 개발 도중에 상당히 머리가 아팠던 것 같다.   
결국, Next.js의 동작 방식에 대한 근본적인 이해가 부족한 상태에서   
도입을 하였기 때문에 겪었던 문제들이라고 생각한다.   
어떤 기술의 사용법을 익히는 것도 중요하지만,  
그 기술의 동작 방식에 대한 근본적이고 정확한 이해가 선행되어야 함을 깨달았다.   
  
### 3. Ant Design  
  
Ant Design이라는 UI 라이브러리를 처음 사용해보았다.   
결론부터 말하면…장단점이 너무나 뚜렷했던 녀석이었다고 생각한다.   
장점은 만들기 어렵지는 않지만 다소 번거로은 컴포넌트(modal, spinner, calender 등)를  
매우 쉽게 사용할 수 있다는 것이었다.   
이 덕분에 빠른 속도로 마크업 작업을 끝낼 수 있었으며,   
API의 연동 등 비즈니스 로직을 풀어나가는데 집중할 수 있었다.   
또한, Form 컴포넌트의 성능이 매우 좋았기 때문에   
useForm 등을 사용해서 validation을 효율적으로 처리하는데 도움을 받을 수 있었다.   
또한, Antd는 디자이너의 부재 문제를 해결해주었다.   
우리 팀에는 디자이너가 없기 때문에 디자인이 가장 큰 고민이었는데,  
Antd의 예쁘고 깔끔한 디자인 덕분에 이러한 고민을 조금이나마 덜 수 있었다.   
  
단점은 우선, Antd의 디자인을 커스텀하기가 너무 까다로웠다는 점이다.   
Antd의 컴포넌트에서 일부 속성(폰트, 컬러 등)만 바꾸려할 때,   
적용이 잘 안 되는 경우가 많았다.   
또는 간신히 적용이 되었다고 해도, 그 변경점이  
기존의 다른 속성들과 충돌을 일으켜 디자인이 이상해지고는 하였다.   
우리는 Emotion을 사용했었는데,   
어쩌면 Antd와 Emotion의 호환이 안 맞았던 것인지도 모르겠다.   
Antd가 아니라 MUI를 사용했다면 어땠을까하는 생각이 들었던 부분이다.   
  
그리고 또한, Antd 각각의 컴포넌트는 고유의 동작 방식을 가지고 있었다.   
여기서 동작 방식이라 함은 props로 전달할 수 있는 속성, 메서드, 그것들의 타입을 말한다.   
예를 들어, 이미지를 업로드할 수 있는 Upload라는 컴포넌트가 있다.   
이미지가 업로드된 후를 처리하려면 `onChange`에 함수를 넘겨야 한다.   
`onChange`는 매개 변수, 반환값, 그것들의 타입이 다 정해져 있어서   
그것을 반드시 준수해야만 했고, 그러한 까다로운 제한 때문에 시간을 꽤 소비해야만 했다.   
  
또한, `File` 타입을 확장한 `UploadFile` 등 Antd 고유의 타입들도 많았던 까닭에  
타입스크립트를 작업하는 것이 한층 더 까다로웠다.   
그것들은 생소한 타입이어서 타입스크립트가 잘 인식을 못하는 경우도 발생했던 것이다.   
이러한 점들이 Antd를 사용하면서 아쉬웠던 부분이다.   
  
결론적으로, Antd와 같은 UI 라이브러리의 장단점을 잘 느낄 수 있었다.   
내가 결론내린 바는 이렇다.   
간단한 것을 구현할 때, 디자인을 별로 신경쓰고 싶지 않을 때,   
직접 만들기 번거로운 컴포넌트를 사용하고 싶을 때 UI 라이브러리를 사용하면 좋을 것 같다.   
반면에, 디자인적으로 커스텀이 많이 필요하거나,   
컴포넌트가 제공해주는 것 이상의 심화 기능을 추가하는 경우는 문제가 더 복잡해질 수 있다.   
그 고유의 동작 방식이 정해져 있어, 그것이 까다롭게 발목을 잡을 수 있기 때문이다.   
또한, UI 컴포넌트를 제대로 사용하려면 그것에 대한 사전 공부가 필수라는 생각이 들었다.   

## 나의 작업물

1. **후기 작성 & 수정 페이지**   
  전시회의 후기를 작성 및 수정할 수 있는 페이지 구현  

- 다녀온 전시회 검색 기능  
    - 검색어 자동 완성 UI  
    - 커스텀 훅으로 디바운스 적용  
    - 기술 문서: [https://gitul0515.github.io/프로젝트리뷰/2022/09/08/아트집.html](https://gitul0515.github.io/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A6%AC%EB%B7%B0/2022/09/08/%EC%95%84%ED%8A%B8%EC%A7%91.html)
- 후기 내용 입력 폼  
    - 다녀온 날짜, 제목, 내용, 공개 여부  
    - 유효성 검사  
- 다수 이미지 파일 업로드 및 삭제  
    - 유효성 검사(용량 및 확장자)  

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%209.png)  

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%2010.png)  

1. **유저 페이지 & 프로필 수정 페이지**  
    - 유저의 정보를 조회할 수 있는 페이지 구현  
        - 작성한 후기, 좋아요 누른 후기 및 전시회 조회  
        - SWR을 사용한 데이터 fetching  
        - 페이지네이션  
    - 프로필 정보를 수정할 수 있는 페이지 구현  
        - 프로필 사진, 닉네임, 비밀번호 수정  
        - useForm을 사용한 유효성 검사  
  
![Untitled]  (%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%2011.png)  

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%2012.png)  

1. **반응형 헤더**  
    - 로그인 상태, 현재 페이지, 디바이스 환경에 따라 스타일 변화  
    - useClickAway 훅을 사용하여 Dropdown 구현  

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%2013.png)

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%2014.png)

1. **최적화**  
    - 버튼 중복 클릭 등 API의 과도한 호출 방지  
        - 커스텀 훅으로 디바운스 적용  
        - 기술 문서: [https://gitul0515.github.io/프로젝트리뷰/2022/09/04/아트집.html](https://gitul0515.github.io/%ED%94%84%EB%A1%9C%EC%A0%9D%ED%8A%B8%EB%A6%AC%EB%B7%B0/2022/09/04/%EC%95%84%ED%8A%B8%EC%A7%91.html)
    - Next/Image를 활용한 이미지 최적화  
        - 이미지 사이즈 최적화, lazy loading, placeholder 등  
    - SEO  
        - documents.tsx  

1. **프론트엔드 팀장**  
    - 백엔드와의 소통 및 의견 조율을 위한 노력  
    - 회의 진행, 일정 관리, 발표  
    - 발표 영상: [https://www.youtube.com/watch?v=GRonUVaSoFE&t=9](https://www.youtube.com/watch?v=GRonUVaSoFE&t=9)  

## 느낀점  
  
### 1. 백엔드와의 첫 협업 경험  

회의가 정말 많다…  

![Untitled](%E1%84%8E%E1%85%AC%E1%84%8C%E1%85%A9%E1%86%BC%20%E1%84%91%E1%85%B3%E1%84%85%E1%85%A9%E1%84%8C%E1%85%A6%E1%86%A8%E1%84%90%E1%85%B3%20%E1%84%92%E1%85%AC%E1%84%80%E1%85%A9%200ee6cd2d1a954c02a7db27fb777d5317/Untitled%2015.png)